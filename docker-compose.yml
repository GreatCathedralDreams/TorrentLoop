version: "3.9"
name: media-stack
services:
  vpn:
  ## Read https://github.com/qdm12/gluetun/wiki for details on configuring VPN for different service providers.
    profiles: ["vpn", "stack-2"]
    container_name: vpn
    image: qmcgaw/gluetun:v3.35.0
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER:-nordvpn} # Valid values: nordvpn, expressvpn, protonvpn, surfshark or custom
      - OPENVPN_USER=${OPENVPN_USER:-""}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD:-""}

      ## For list of server regions and countries, visit https://raw.githubusercontent.com/qdm12/gluetun/master/internal/storage/servers.json

      ## SERVER_REGIONS is required for NordVPN and Surfshark VPN. Comment SERVER_COUNTRIES if SERVER_REGIONS is used.
      - SERVER_REGIONS=${SERVER_REGIONS:-Switzerland}
    
      ## SERVER_COUNTRIES is required for ExpressVPN and ProtonVPN. Comment SERVER_REGIONS if SERVER_COUNTRIES is used.
      # - SERVER_COUNTRIES=${SERVER_COUNTRIES:-Netherlands}
      # - FREE_ONLY=on  # Valid with protonvpn only. on if using free service provided by protonvpn

      ## Enable below if VPN_SERVICE_PROVIDER=custom
      # - VPN_TYPE=openvpn # or wiregiuard. 

      ## If VPN_TYPE is openvpn
      # - OPENVPN_CUSTOM_CONFIG=/gluetun/custom.conf

      ## If VPN_TYPE is wireguard. Replace below env variables as required.
      # - VPN_ENDPOINT_IP=1.2.3.4                                               # Replace with your wg endpoint ip or domain
      # - VPN_ENDPOINT_PORT=51820                                               # Replace with wg server port
      # - WIREGUARD_PUBLIC_KEY=wAUaJMhAq3NFutLHIdF8AN0B5WG8RndfQKLPTEDHal0=     # Replace with your wg public key
      # - WIREGUARD_PRIVATE_KEY=wOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=    # Replace with your wg client private key
      # - WIREGUARD_PRESHARED_KEY=xOEI9rqqbDwnN8/Bpp22sVz48T71vJ4fYmFWujulwUU=  # Replaced with your wg pre-shared key
      # - WIREGUARD_ADDRESSES="10.64.222.21/32"                                 # Replace with wg address

    ## Enable volume if custom VPN_SERVICE_PROVIDER is used
    # volumes:
      # - /yourpath/yourconfig.conf:/gluetun/config.conf:ro

    networks:
      - mynetwork
    ports:
      # qbittorrent ports
      - 5080:5080
      - 6881:6881
      - 6881:6881/udp
      # Transmission ports. Uncomment below if Transmission is used with VPN
      # - 9091:9091
      # - 51413:51413
      # - 51413:51413/udp
      # Prowlarr Ports
      - 9696:9696
    restart: "unless-stopped"
    labels:
      - "traefik.enable=true"

      # For qbt

      # adding a slash to the end
      - "traefik.http.routers.qbt.entrypoints=websecure"
      - "traefik.http.middlewares.qbt-redirect.redirectregex.regex=^(.*)/qbt$$"
      - "traefik.http.middlewares.qbt-redirect.redirectregex.replacement=$$1/qbt/"
      - "traefik.http.middlewares.qbt-strip.stripprefix.prefixes=/qbt/"
      # appropropriate header changes
      - "traefik.http.middlewares.qbt-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.qbt-headers.headers.customrequestheaders.Referer="
      - "traefik.http.middlewares.qbt-headers.headers.customrequestheaders.Origin="
      - "traefik.http.routers.qbt.middlewares=qbt-strip,qbt-redirect,qbt-headers"
      # loadbalancer to *not* pass the host header
      - "traefik.http.services.qbt.loadbalancer.server.port=5080"
      - "traefik.http.services.qbt.loadbalancer.passhostheader=false"
      # Domain and TLS
      - traefik.http.routers.qbt.rule=Host(`${DOMAIN}`) && PathPrefix(`/qbt`)
      - traefik.http.routers.qbt.tls=true
      - traefik.http.routers.qbt.tls.certresolver=le
      - traefik.http.routers.qbt.tls.domains[0].main=${DOMAIN}

      # For prowlarr

      - "traefik.http.routers.prowlarr.entrypoints=https"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
      # Routers rules
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - traefik.http.routers.prowlarr.rule=Host(`${DOMAIN}`) && PathPrefix(`/prowlarr`)
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=le
      - traefik.http.routers.prowlarr.tls.domains[0].main=${DOMAIN}
  transmission:
    profiles: ["tx", "stack-1"]
    container_name: transmission
    image: lscr.io/linuxserver/transmission:4.0.3
    # Unomment this if vpn is enabled
    # depends_on: 
    #  - vpn
    networks:         # Comment this line if vpn is enabled
      - mynetwork     # Comment this line if vpn is enabled
    # network_mode: service:vpn # Uncomment this line if vpn is enabled
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - USER=admin
      - PASS=nimdatx

    ## Comment below ports if VPN is enabled.
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    volumes:
      - tx-config:/config
      - torrent-downloads:/downloads
      - tx-watch:/watch
    restart: "unless-stopped"

  ## Default credentials - Username: admin password: adminadmin ##
  ## Change password after install from UI --> Tools --> Options --> WebUI ##
  qbittorrent:
    container_name: qbittorrent
    profiles: ["qbt", "stack-2"]
    image: lscr.io/linuxserver/qbittorrent:4.5.4
    # Comment this if vpn is disabled
    depends_on:               # Comment this line if vpn is disabled
      - vpn                   # Comment this line if vpn is disabled
    # networks:               # Uncomment this line if vpn is disabled
    #   - mynetwork           # Uncomment this line if vpn is disabled
    network_mode: service:vpn # Comment this line if vpn is disabled
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
      - WEBUI_PORT=5080
    volumes:
      - qbittorrent-config:/config
      - torrent-downloads:/downloads

    ## Uncomment below ports if VPN is disabled.
    # ports:
    #   - 5080:5080
    #   - 6881:6881
    #   - 6881:6881/udp
    restart: "unless-stopped"
  radarr:
    profiles: ["base", "radarr", "stack-1", "stack-2"]
    container_name: radarr
    image: lscr.io/linuxserver/radarr:4.6.4
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    ports:
      - 7878:7878
    volumes:
      - radarr-config:/config
      - torrent-downloads:/downloads
    restart: "unless-stopped"
    labels:
      - traefik.enable=true
      - "traefik.http.routers.radarr.entrypoints=https"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      # Routers rules
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - traefik.http.routers.radarr.rule=Host(`${DOMAIN}`) && PathPrefix(`/radarr`)
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=le
      - traefik.http.routers.radarr.tls.domains[0].main=${DOMAIN}

  sonarr:
    profiles: ["base", "sonarr", "stack-1", "stack-2"]
    image: lscr.io/linuxserver/sonarr:4.0.0-develop
    container_name: sonarr
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - sonarr-config:/config
      - torrent-downloads:/downloads
    ports:
      - 8989:8989
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarr.entrypoints=https"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # Routers rules
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - traefik.http.routers.sonarr.rule=Host(`${DOMAIN}`) && PathPrefix(`/sonarr`)
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=le
      - traefik.http.routers.sonarr.tls.domains[0].main=${DOMAIN}

  jackett:
    profiles: ["jackett", "stack-1"]
    container_name: jackett
    image: lscr.io/linuxserver/jackett:0.21.462
    # Uncomment this if vpn is enabled
    # depends_on:               # Uncomment this line if vpn is enabled
    #   - vpn                   # Uncomment this line if vpn is enabled
    # network_mode: service:vpn # Uncomment this line if vpn is enabled
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - jackett-config:/config
      - jackett-blackhole:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped

  prowlarr:
    profiles: ["prowlarr", "stack-2"]
    container_name: prowlarr
    image: linuxserver/prowlarr:1.6.3
    # Comment this if vpn is disabled
    depends_on:               # Comment this line if vpn is disabled
      - vpn                   # Comment this line if vpn is disabled
    network_mode: service:vpn # Comment this line if vpn is disabled
    # networks:               # Uncomment this line if vpn is disabled
    #   - mynetwork           # Uncomment this line if vpn is disabled
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - prowlarr-config:/config
    ## Uncomment below ports if VPN is disabled.
    # ports:
    #   - 9696:9696
    restart: unless-stopped

  jellyfin:
    profiles: ["base", "jelly", "stack-1", "stack-2"]
    image: lscr.io/linuxserver/jellyfin:10.8.10
    container_name: jellyfin
    networks:
      - mynetwork
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=UTC
    volumes:
      - jellyfin-config:/config
      - torrent-downloads:/data
    devices:
      # - /dev/videoN:/dev/videoN # Mount GPU device 
      - /dev/dri/renderD128:/dev/dri/renderD128
    ports:
      - 8096:8096
      - 7359:7359/udp
      - 8920:8920
    restart: unless-stopped
    labels:
      - traefik.enable=true
      ## HTTP Router
      #### Entry point where Jellyfin is accessible via
      #### Change secure to https in the line below to have accessible without needing to specify a port and change the SSLHost option below
      - traefik.http.routers.jellyfin.entryPoints=websecure
      #### Host or Path where Jellyfin is accessible
      #### Remove (or change) this rule if you'd rather have Jellyfin accessible at a PathPrefix URI
      - traefik.http.routers.jellyfin.rule=Host(`${DOMAIN}`) && PathPrefix(`/jellyfin`)
      #### Enable TLS with the ACME/LetsEncrypt resolver for HOSTNAME.DOMAIN_NAME
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certResolver=le
      - traefik.http.routers.jellyfin.tls.domains=${DOMAIN}
      ## Middleware
      - 'traefik.http.routers.jellyfin.middlewares=jellyfin-mw'
      #### The customResponseHeaders option lists the Header names and values to apply to the response.
      - 'traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
      #### The sslRedirect is set to true, then only allow https requests.
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true'
      #### The sslHost option is the host name that is used to redirect http requests to https.
      #### This is the exact URL that will be redirected to, so you can remove the :9999 port if using default SSL port
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLHost=${DOMAIN}'
      #### Set sslForceHost to true and set SSLHost to forced requests to use SSLHost even the ones that are already using SSL.
      #### Note that this uses SSLHost verbatim, so add the port to SSLHost if you are using an alternate port.
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true'
      #### The stsSeconds is the max-age of the Strict-Transport-Security header. If set to 0, would NOT include the header.
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000'
      #### The stsIncludeSubdomains is set to true, the includeSubDomains directive will be
      #### appended to the Strict-Transport-Security header.
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true'
      #### Set stsPreload to true to have the preload flag appended to the Strict-Transport-Security header.
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true'
      #### Set forceSTSHeader to true, to add the STS header even when the connection is HTTP.
      - 'traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true'
      #### Set frameDeny to true to add the X-Frame-Options header with the value of DENY.
      - 'traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true'
      #### Set contentTypeNosniff to true to add the X-Content-Type-Options header with the value nosniff.
      - 'traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true'
      #### Set browserXssFilter to true to add the X-XSS-Protection header with the value 1; mode=block.
      - 'traefik.http.middlewares.jellyfin-mw.headers.customresponseheaders.X-XSS-PROTECTION=0'
      #### The customFrameOptionsValue allows the X-Frame-Options header value to be set with a custom value. This
      #### overrides the FrameDeny option.
      - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://${DOMAIN}'"
      ## HTTP Service
      # We define the port here as a port is required
      - 'traefik.http.services.jellyfin-svc.loadBalancer.server.port=8096'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader=true'
      ## Redirection of HTTP on port 9999 to HTTPS on port 9999 (consistent protocol)
      - 'traefik.http.routers.jellyfin-insecure.entryPoints=websecure'
      - 'traefik.http.routers.jellyfin-insecure.rule=Host(`${DOMAIN}`) && PathPrefix(`/jellyfin`)'
      - 'traefik.http.routers.jellyfin-insecure.middlewares=jellyfin-insecure-mw'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.permanent=false'
      - 'traefik.http.routers.jellyfin-insecure.service=noop@internal'

  cleanmyarr:
    depends_on:
      - radarr
      - sonarr
    profiles: ["base", "cleanmyarr", "stack-2"]
    image: linuxshots/cleanmyarr:0.6.1
    container_name: cleanmyarr
    networks:
      - mynetwork
    volumes:
      - cleanmyarr-config:/config
    restart: unless-stopped

volumes:
  torrent-downloads:
  radarr-config:
  sonarr-config:
  jackett-config:
  jackett-blackhole:
  prowlarr-config:
  jellyfin-config:
  qbittorrent-config:
  tx-config:
  tx-watch:
  cleanmyarr-config:

networks:
  mynetwork:
    external: true
